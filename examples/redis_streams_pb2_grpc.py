# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import redis_streams_pb2 as redis__streams__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in redis_streams_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RedisStreamsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/redisstreamspb.RedisStreams/Publish',
                request_serializer=redis__streams__pb2.PublishRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.PublishResponse.FromString,
                _registered_method=True)
        self.PublishBatch = channel.unary_unary(
                '/redisstreamspb.RedisStreams/PublishBatch',
                request_serializer=redis__streams__pb2.PublishBatchRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.PublishBatchResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_stream(
                '/redisstreamspb.RedisStreams/Subscribe',
                request_serializer=redis__streams__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.Message.FromString,
                _registered_method=True)
        self.ReadStream = channel.unary_unary(
                '/redisstreamspb.RedisStreams/ReadStream',
                request_serializer=redis__streams__pb2.ReadStreamRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.ReadStreamResponse.FromString,
                _registered_method=True)
        self.ReadRange = channel.unary_unary(
                '/redisstreamspb.RedisStreams/ReadRange',
                request_serializer=redis__streams__pb2.ReadRangeRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.ReadRangeResponse.FromString,
                _registered_method=True)
        self.Ack = channel.unary_unary(
                '/redisstreamspb.RedisStreams/Ack',
                request_serializer=redis__streams__pb2.AckRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.AckResponse.FromString,
                _registered_method=True)
        self.ListTopics = channel.unary_unary(
                '/redisstreamspb.RedisStreams/ListTopics',
                request_serializer=redis__streams__pb2.ListTopicsRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.ListTopicsResponse.FromString,
                _registered_method=True)
        self.StreamInfo = channel.unary_unary(
                '/redisstreamspb.RedisStreams/StreamInfo',
                request_serializer=redis__streams__pb2.StreamInfoRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.StreamInfoResponse.FromString,
                _registered_method=True)
        self.ConsumerGroupInfo = channel.unary_unary(
                '/redisstreamspb.RedisStreams/ConsumerGroupInfo',
                request_serializer=redis__streams__pb2.ConsumerGroupInfoRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.ConsumerGroupInfoResponse.FromString,
                _registered_method=True)
        self.CreateConsumerGroup = channel.unary_unary(
                '/redisstreamspb.RedisStreams/CreateConsumerGroup',
                request_serializer=redis__streams__pb2.CreateConsumerGroupRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.CreateConsumerGroupResponse.FromString,
                _registered_method=True)
        self.DeleteConsumerGroup = channel.unary_unary(
                '/redisstreamspb.RedisStreams/DeleteConsumerGroup',
                request_serializer=redis__streams__pb2.DeleteConsumerGroupRequest.SerializeToString,
                response_deserializer=redis__streams__pb2.DeleteConsumerGroupResponse.FromString,
                _registered_method=True)


class RedisStreamsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Publishing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Consuming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ack(self, request, context):
        """Acknowledgment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTopics(self, request, context):
        """Topic Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsumerGroupInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateConsumerGroup(self, request, context):
        """Consumer Group Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteConsumerGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedisStreamsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=redis__streams__pb2.PublishRequest.FromString,
                    response_serializer=redis__streams__pb2.PublishResponse.SerializeToString,
            ),
            'PublishBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishBatch,
                    request_deserializer=redis__streams__pb2.PublishBatchRequest.FromString,
                    response_serializer=redis__streams__pb2.PublishBatchResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=redis__streams__pb2.SubscribeRequest.FromString,
                    response_serializer=redis__streams__pb2.Message.SerializeToString,
            ),
            'ReadStream': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadStream,
                    request_deserializer=redis__streams__pb2.ReadStreamRequest.FromString,
                    response_serializer=redis__streams__pb2.ReadStreamResponse.SerializeToString,
            ),
            'ReadRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRange,
                    request_deserializer=redis__streams__pb2.ReadRangeRequest.FromString,
                    response_serializer=redis__streams__pb2.ReadRangeResponse.SerializeToString,
            ),
            'Ack': grpc.unary_unary_rpc_method_handler(
                    servicer.Ack,
                    request_deserializer=redis__streams__pb2.AckRequest.FromString,
                    response_serializer=redis__streams__pb2.AckResponse.SerializeToString,
            ),
            'ListTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTopics,
                    request_deserializer=redis__streams__pb2.ListTopicsRequest.FromString,
                    response_serializer=redis__streams__pb2.ListTopicsResponse.SerializeToString,
            ),
            'StreamInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.StreamInfo,
                    request_deserializer=redis__streams__pb2.StreamInfoRequest.FromString,
                    response_serializer=redis__streams__pb2.StreamInfoResponse.SerializeToString,
            ),
            'ConsumerGroupInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsumerGroupInfo,
                    request_deserializer=redis__streams__pb2.ConsumerGroupInfoRequest.FromString,
                    response_serializer=redis__streams__pb2.ConsumerGroupInfoResponse.SerializeToString,
            ),
            'CreateConsumerGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConsumerGroup,
                    request_deserializer=redis__streams__pb2.CreateConsumerGroupRequest.FromString,
                    response_serializer=redis__streams__pb2.CreateConsumerGroupResponse.SerializeToString,
            ),
            'DeleteConsumerGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteConsumerGroup,
                    request_deserializer=redis__streams__pb2.DeleteConsumerGroupRequest.FromString,
                    response_serializer=redis__streams__pb2.DeleteConsumerGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'redisstreamspb.RedisStreams', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('redisstreamspb.RedisStreams', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RedisStreams(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/Publish',
            redis__streams__pb2.PublishRequest.SerializeToString,
            redis__streams__pb2.PublishResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/PublishBatch',
            redis__streams__pb2.PublishBatchRequest.SerializeToString,
            redis__streams__pb2.PublishBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/redisstreamspb.RedisStreams/Subscribe',
            redis__streams__pb2.SubscribeRequest.SerializeToString,
            redis__streams__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/ReadStream',
            redis__streams__pb2.ReadStreamRequest.SerializeToString,
            redis__streams__pb2.ReadStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/ReadRange',
            redis__streams__pb2.ReadRangeRequest.SerializeToString,
            redis__streams__pb2.ReadRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/Ack',
            redis__streams__pb2.AckRequest.SerializeToString,
            redis__streams__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/ListTopics',
            redis__streams__pb2.ListTopicsRequest.SerializeToString,
            redis__streams__pb2.ListTopicsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/StreamInfo',
            redis__streams__pb2.StreamInfoRequest.SerializeToString,
            redis__streams__pb2.StreamInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConsumerGroupInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/ConsumerGroupInfo',
            redis__streams__pb2.ConsumerGroupInfoRequest.SerializeToString,
            redis__streams__pb2.ConsumerGroupInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateConsumerGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/CreateConsumerGroup',
            redis__streams__pb2.CreateConsumerGroupRequest.SerializeToString,
            redis__streams__pb2.CreateConsumerGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteConsumerGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/redisstreamspb.RedisStreams/DeleteConsumerGroup',
            redis__streams__pb2.DeleteConsumerGroupRequest.SerializeToString,
            redis__streams__pb2.DeleteConsumerGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
