// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: redis_streams.proto

package redisstreamspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedisStreams_Publish_FullMethodName             = "/redisstreamspb.RedisStreams/Publish"
	RedisStreams_PublishBatch_FullMethodName        = "/redisstreamspb.RedisStreams/PublishBatch"
	RedisStreams_Subscribe_FullMethodName           = "/redisstreamspb.RedisStreams/Subscribe"
	RedisStreams_ReadStream_FullMethodName          = "/redisstreamspb.RedisStreams/ReadStream"
	RedisStreams_ReadRange_FullMethodName           = "/redisstreamspb.RedisStreams/ReadRange"
	RedisStreams_Ack_FullMethodName                 = "/redisstreamspb.RedisStreams/Ack"
	RedisStreams_ListTopics_FullMethodName          = "/redisstreamspb.RedisStreams/ListTopics"
	RedisStreams_StreamInfo_FullMethodName          = "/redisstreamspb.RedisStreams/StreamInfo"
	RedisStreams_ConsumerGroupInfo_FullMethodName   = "/redisstreamspb.RedisStreams/ConsumerGroupInfo"
	RedisStreams_CreateConsumerGroup_FullMethodName = "/redisstreamspb.RedisStreams/CreateConsumerGroup"
	RedisStreams_DeleteConsumerGroup_FullMethodName = "/redisstreamspb.RedisStreams/DeleteConsumerGroup"
)

// RedisStreamsClient is the client API for RedisStreams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisStreamsClient interface {
	// Publishing
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	PublishBatch(ctx context.Context, in *PublishBatchRequest, opts ...grpc.CallOption) (*PublishBatchResponse, error)
	// Consuming
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	ReadStream(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error)
	ReadRange(ctx context.Context, in *ReadRangeRequest, opts ...grpc.CallOption) (*ReadRangeResponse, error)
	// Acknowledgment
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	// Topic Management
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	StreamInfo(ctx context.Context, in *StreamInfoRequest, opts ...grpc.CallOption) (*StreamInfoResponse, error)
	ConsumerGroupInfo(ctx context.Context, in *ConsumerGroupInfoRequest, opts ...grpc.CallOption) (*ConsumerGroupInfoResponse, error)
	// Consumer Group Management
	CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error)
	DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupResponse, error)
}

type redisStreamsClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisStreamsClient(cc grpc.ClientConnInterface) RedisStreamsClient {
	return &redisStreamsClient{cc}
}

func (c *redisStreamsClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, RedisStreams_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) PublishBatch(ctx context.Context, in *PublishBatchRequest, opts ...grpc.CallOption) (*PublishBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishBatchResponse)
	err := c.cc.Invoke(ctx, RedisStreams_PublishBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RedisStreams_ServiceDesc.Streams[0], RedisStreams_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RedisStreams_SubscribeClient = grpc.ServerStreamingClient[Message]

func (c *redisStreamsClient) ReadStream(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadStreamResponse)
	err := c.cc.Invoke(ctx, RedisStreams_ReadStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) ReadRange(ctx context.Context, in *ReadRangeRequest, opts ...grpc.CallOption) (*ReadRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadRangeResponse)
	err := c.cc.Invoke(ctx, RedisStreams_ReadRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, RedisStreams_Ack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, RedisStreams_ListTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) StreamInfo(ctx context.Context, in *StreamInfoRequest, opts ...grpc.CallOption) (*StreamInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamInfoResponse)
	err := c.cc.Invoke(ctx, RedisStreams_StreamInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) ConsumerGroupInfo(ctx context.Context, in *ConsumerGroupInfoRequest, opts ...grpc.CallOption) (*ConsumerGroupInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumerGroupInfoResponse)
	err := c.cc.Invoke(ctx, RedisStreams_ConsumerGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsumerGroupResponse)
	err := c.cc.Invoke(ctx, RedisStreams_CreateConsumerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisStreamsClient) DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConsumerGroupResponse)
	err := c.cc.Invoke(ctx, RedisStreams_DeleteConsumerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisStreamsServer is the server API for RedisStreams service.
// All implementations must embed UnimplementedRedisStreamsServer
// for forward compatibility.
type RedisStreamsServer interface {
	// Publishing
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	PublishBatch(context.Context, *PublishBatchRequest) (*PublishBatchResponse, error)
	// Consuming
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Message]) error
	ReadStream(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	ReadRange(context.Context, *ReadRangeRequest) (*ReadRangeResponse, error)
	// Acknowledgment
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	// Topic Management
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	StreamInfo(context.Context, *StreamInfoRequest) (*StreamInfoResponse, error)
	ConsumerGroupInfo(context.Context, *ConsumerGroupInfoRequest) (*ConsumerGroupInfoResponse, error)
	// Consumer Group Management
	CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupResponse, error)
	DeleteConsumerGroup(context.Context, *DeleteConsumerGroupRequest) (*DeleteConsumerGroupResponse, error)
	mustEmbedUnimplementedRedisStreamsServer()
}

// UnimplementedRedisStreamsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedisStreamsServer struct{}

func (UnimplementedRedisStreamsServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedRedisStreamsServer) PublishBatch(context.Context, *PublishBatchRequest) (*PublishBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishBatch not implemented")
}
func (UnimplementedRedisStreamsServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRedisStreamsServer) ReadStream(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStream not implemented")
}
func (UnimplementedRedisStreamsServer) ReadRange(context.Context, *ReadRangeRequest) (*ReadRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRange not implemented")
}
func (UnimplementedRedisStreamsServer) Ack(context.Context, *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedRedisStreamsServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedRedisStreamsServer) StreamInfo(context.Context, *StreamInfoRequest) (*StreamInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamInfo not implemented")
}
func (UnimplementedRedisStreamsServer) ConsumerGroupInfo(context.Context, *ConsumerGroupInfoRequest) (*ConsumerGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerGroupInfo not implemented")
}
func (UnimplementedRedisStreamsServer) CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumerGroup not implemented")
}
func (UnimplementedRedisStreamsServer) DeleteConsumerGroup(context.Context, *DeleteConsumerGroupRequest) (*DeleteConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumerGroup not implemented")
}
func (UnimplementedRedisStreamsServer) mustEmbedUnimplementedRedisStreamsServer() {}
func (UnimplementedRedisStreamsServer) testEmbeddedByValue()                      {}

// UnsafeRedisStreamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisStreamsServer will
// result in compilation errors.
type UnsafeRedisStreamsServer interface {
	mustEmbedUnimplementedRedisStreamsServer()
}

func RegisterRedisStreamsServer(s grpc.ServiceRegistrar, srv RedisStreamsServer) {
	// If the following call pancis, it indicates UnimplementedRedisStreamsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedisStreams_ServiceDesc, srv)
}

func _RedisStreams_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_PublishBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).PublishBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_PublishBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).PublishBatch(ctx, req.(*PublishBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RedisStreamsServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RedisStreams_SubscribeServer = grpc.ServerStreamingServer[Message]

func _RedisStreams_ReadStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).ReadStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_ReadStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).ReadStream(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_ReadRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).ReadRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_ReadRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).ReadRange(ctx, req.(*ReadRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_ListTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_StreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).StreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_StreamInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).StreamInfo(ctx, req.(*StreamInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_ConsumerGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).ConsumerGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_ConsumerGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).ConsumerGroupInfo(ctx, req.(*ConsumerGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_CreateConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).CreateConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_CreateConsumerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).CreateConsumerGroup(ctx, req.(*CreateConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisStreams_DeleteConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisStreamsServer).DeleteConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisStreams_DeleteConsumerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisStreamsServer).DeleteConsumerGroup(ctx, req.(*DeleteConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisStreams_ServiceDesc is the grpc.ServiceDesc for RedisStreams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisStreams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redisstreamspb.RedisStreams",
	HandlerType: (*RedisStreamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _RedisStreams_Publish_Handler,
		},
		{
			MethodName: "PublishBatch",
			Handler:    _RedisStreams_PublishBatch_Handler,
		},
		{
			MethodName: "ReadStream",
			Handler:    _RedisStreams_ReadStream_Handler,
		},
		{
			MethodName: "ReadRange",
			Handler:    _RedisStreams_ReadRange_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _RedisStreams_Ack_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _RedisStreams_ListTopics_Handler,
		},
		{
			MethodName: "StreamInfo",
			Handler:    _RedisStreams_StreamInfo_Handler,
		},
		{
			MethodName: "ConsumerGroupInfo",
			Handler:    _RedisStreams_ConsumerGroupInfo_Handler,
		},
		{
			MethodName: "CreateConsumerGroup",
			Handler:    _RedisStreams_CreateConsumerGroup_Handler,
		},
		{
			MethodName: "DeleteConsumerGroup",
			Handler:    _RedisStreams_DeleteConsumerGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _RedisStreams_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "redis_streams.proto",
}
